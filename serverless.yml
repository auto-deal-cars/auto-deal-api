service: auto-deal
package:
  individually: true
frameworkVersion: '3'
useDotenv: true
params:
  default:
    audienceIssuerUrl: ${env.AUDIENCE_ISSUER_URL}
    audienceClientId: ${env.AUDIENCE_CLIENT_ID}
provider:
  name: aws
  ecr:
    images:
      vehicle:
        path: ./vehicle
        platform: linux/arm64
  stage: dev
  region: us-east-1
  runtime: python3.10
  timeout: 30
  deploymentMethod: direct
  environment:
    DATABASE_URL: ${env.DATABASE_URL}
    AUDIENCE_ISSUER_URL: ${env.AUDIENCE_ISSUER_URL}
    AUDIENCE_CLIENT_ID: ${env.AUDIENCE_CLIENT_ID}
  httpApi:
    cors: true
    authorizers:
      autoDealAuthorizer:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl: ${param:audienceIssuerUrl}
        audience:
          - ${param:audienceClientId}
  architecture: arm64
functions:
  create_vehicle:
    image:
      name: vehicle
    events:
      - httpApi:
          path: /vehicle
          method: post
          authorizer:
            name: autoDealAuthorizer
  update_vehicle:
    image:
      name: vehicle
      command: ["vehicle.adapters.controllers.update_vehicle_controller.update_vehicle"]
    events:
      - httpApi:
          path: /vehicle/{id}
          method: put
          authorizer:
            name: autoDealAuthorizer
  get_vehicle:
    image:
      name: vehicle
      command: ["vehicle.adapters.controllers.get_vehicle_controller.get_vehicle"]
    events:
      - httpApi:
          path: /vehicle/{id}
          method: get
          authorizer:
            name: autoDealAuthorizer
  list_available_vehicles:
    image:
      name: vehicle
      command: ["vehicle.adapters.controllers.list_available_vehicles_controller.list_available_vehicles"]
    events:
      - httpApi:
          path: /vehicles
          method: get
          authorizer:
            name: autoDealAuthorizer
plugins:
  - serverless-dotenv-plugin
