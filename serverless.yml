service: auto-deal
package:
  individually: true
frameworkVersion: '3'
useDotenv: true
params:
  default:
    audienceIssuerUrl: ${env.AUDIENCE_ISSUER_URL}
    audienceClientId: ${env.AUDIENCE_CLIENT_ID}
    initializePaymentQueueUrl: ${env.INITIALIZE_PAYMENT_QUEUE_URL}
provider:
  name: aws
  ecr:
    images:
      vehicle:
        path: ./vehicle
        platform: linux/arm64
  stage: dev
  region: us-east-1
  runtime: python3.10
  timeout: 900
  deploymentMethod: direct
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - sqs:SendMessage
          Resource:
            - ${param:initializePaymentQueueUrl}
  environment:
    DATABASE_URL: ${env.DATABASE_URL}
    AUDIENCE_ISSUER_URL: ${env.AUDIENCE_ISSUER_URL}
    AUDIENCE_CLIENT_ID: ${env.AUDIENCE_CLIENT_ID}
    INITIALIZE_PAYMENT_QUEUE_URL: ${env.INITIALIZE_PAYMENT_QUEUE_URL}
    INITIALIZE_PAYMENT_QUEUE_ARN: ${env.INITIALIZE_PAYMENT_QUEUE_ARN}
  httpApi:
    cors: true
    authorizers:
      autoDealAuthorizer:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl: ${param:audienceIssuerUrl}
        audience:
          - ${param:audienceClientId}
  architecture: arm64
functions:
  create_vehicle:
    image:
      name: vehicle
    events:
      - httpApi:
          path: /vehicle
          method: post
          documentation: ${file(serverless.doc.yml):endpoints.create_vehicle}
          authorizer:
            name: autoDealAuthorizer
  update_vehicle:
    image:
      name: vehicle
      command: ["vehicle.adapters.controllers.update_vehicle_controller.update_vehicle"]
    events:
      - httpApi:
          path: /vehicle/{id}
          method: put
          documentation: ${file(serverless.doc.yml):endpoints.update_vehicle}
          authorizer:
            name: autoDealAuthorizer
  get_vehicle:
    image:
      name: vehicle
      command: ["vehicle.adapters.controllers.get_vehicle_controller.get_vehicle"]
    events:
      - httpApi:
          path: /vehicle/{id}
          method: get
          documentation: ${file(serverless.doc.yml):endpoints.get_vehicle}
          authorizer:
            name: autoDealAuthorizer
  list_available_vehicles:
    image:
      name: vehicle
      command: ["vehicle.adapters.controllers.list_available_vehicles_controller.list_available_vehicles"]
    events:
      - httpApi:
          path: /vehicles
          method: get
          documentation: ${file(serverless.doc.yml):endpoints.list_available_vehicles}
          authorizer:
            name: autoDealAuthorizer
  list_sold_vehicles:
    image:
      name: vehicle
      command: ["vehicle.adapters.controllers.list_sold_vehicles_controller.list_sold_vehicles"]
    events:
      - httpApi:
          path: /vehicles/sold
          method: get
          documentation: ${file(serverless.doc.yml):endpoints.list_sold_vehicles}
          authorizer:
            name: autoDealAuthorizer
  initialize_sale:
    image:
      name: vehicle
      command: ["vehicle.adapters.controllers.initialize_sale_controller.initialize_sale"]
    events:
      - httpApi:
          path: /vehicle/{id}/initialize-sale
          method: post
          documentation: ${file(serverless.doc.yml):endpoints.initialize_sale}
          authorizer:
            name: autoDealAuthorizer
  confirm_sale:
    image:
      name: vehicle
      command: ["vehicle.adapters.controllers.confirm_sale_controller.confirm_sale"]
    events:
      - httpApi:
          path: /vehicle/{id}/confirm-sale
          method: put
          documentation: ${file(serverless.doc.yml):endpoints.confirm_sale}
          authorizer:
            name: autoDealAuthorizer
  revert_sale:
    image:
      name: vehicle
      command: ["vehicle.adapters.controllers.revert_sale_controller.revert_sale"]
    events:
      - httpApi:
          path: /vehicle/{id}/revert-sale
          method: delete
          documentation: ${file(serverless.doc.yml):endpoints.revert_sale}
          authorizer:
            name: autoDealAuthorizer
plugins:
  - serverless-dotenv-plugin
  - serverless-openapi-documenter

configValidationMode: warn

custom:
  documentation: ${file(serverless.doc.yml):documentation}
